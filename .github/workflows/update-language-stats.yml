name: Update Language Stats

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create script file
        run: |
          cat > generate-stats.js << 'EOF'
          const fs = require("fs");
          const stats = JSON.parse(fs.readFileSync("stats.json", "utf8"));
          let readme = fs.readFileSync("README.md", "utf8");
          
          // Get configuration from environment variables
          const showOthers = process.env.SHOW_OTHERS === "true";
          const topCount = parseInt(process.env.TOP_LANGUAGES) || 6;
          const svgFilename = process.env.SVG_FILENAME || "language-stats.svg";
          
          // Language colors (GitHub colors)
          const languageColors = {
            "PHP": { bg: "#8993be", text: "#ffffff" },
            "JavaScript": { bg: "#f1e05a", text: "#000000" },
            "TypeScript": { bg: "#3178c6", text: "#ffffff" },
            "HTML": { bg: "#e34c26", text: "#ffffff" },
            "CSS": { bg: "#563d7c", text: "#ffffff" },
            "Python": { bg: "#3572A5", text: "#ffffff" },
            "Java": { bg: "#b07219", text: "#ffffff" },
            "Ruby": { bg: "#701516", text: "#ffffff" },
            "Go": { bg: "#00ADD8", text: "#ffffff" },
            "Swift": { bg: "#ffac45", text: "#000000" },
            "C": { bg: "#555555", text: "#ffffff" },
            "C++": { bg: "#f34b7d", text: "#ffffff" },
            "C#": { bg: "#178600", text: "#ffffff" },
            "Shell": { bg: "#89e051", text: "#000000" },
            "Rust": { bg: "#dea584", text: "#000000" },
            "Other": { bg: "#ededed", text: "#000000" }
          };
          
          // Get the language entries and sort by percentage
          const langEntries = Object.entries(stats.languages)
            .map(([lang, data]) => ({
              language: lang,
              percentage: parseFloat(data.percentage.replace("%", ""))
            }))
            .sort((a, b) => b.percentage - a.percentage);
          
          // Get the top languages
          const topLanguages = langEntries.slice(0, topCount);
          
          // Calculate sum of top language percentages
          const topSum = topLanguages.reduce((sum, lang) => sum + lang.percentage, 0);
          
          // Calculate the "Other" percentage if needed
          const otherPercentage = 100 - topSum;
          
          // Function to format percentage
          const formatPercentage = (pct) => pct.toFixed(2) + "%";
          
          // Prepare final percentages for visualization
          let languages = [];
          
          if (showOthers) {
            // Use original percentages and add "Other"
            languages = topLanguages.map(lang => ({
              language: lang.language,
              percentage: lang.percentage,
              color: languageColors[lang.language]?.bg || "#808080",
              textColor: languageColors[lang.language]?.text || "#000000"
            }));
            
            if (langEntries.length > topCount && otherPercentage > 0) {
              languages.push({
                language: "Other",
                percentage: otherPercentage,
                color: languageColors["Other"].bg,
                textColor: languageColors["Other"].text
              });
            }
          } else {
            // Rescale percentages to total 100%
            languages = topLanguages.map(lang => ({
              language: lang.language,
              percentage: (lang.percentage / topSum) * 100,
              color: languageColors[lang.language]?.bg || "#808080",
              textColor: languageColors[lang.language]?.text || "#000000"
            }));
          }
          
          // Create SVG visualization
          const svgWidth = 900;   // Increased width to ensure it spans 100% of available space
          const svgHeight = 40;   // Reduced height as requested
          const barHeight = 40;   // Reduced bar height as requested
          const fontSize = 12;    // Keep font size the same
          
          // Calculate bar widths and positions
          let currentX = 0;
          languages.forEach(lang => {
            // Make sure we calculate precise widths based on percentage
            lang.width = Math.floor((lang.percentage / 100) * svgWidth);
            lang.x = currentX;
            currentX += lang.width;
          });
          
          // Add any remaining pixels to the last bar to ensure full width
          if (currentX < svgWidth && languages.length > 0) {
            const lastLang = languages[languages.length - 1];
            lastLang.width += (svgWidth - currentX);
          }
          
          // Create SVG
          let svg = `<svg width="${svgWidth}" height="${svgHeight}" xmlns="http://www.w3.org/2000/svg">\n`;
          
          // Add bar segments
          languages.forEach(lang => {
            svg += `  <rect x="${lang.x}" y="0" width="${lang.width}" height="${barHeight}" fill="${lang.color}" />\n`;
          });
          
          // Add text inside each bar segment
          languages.forEach(lang => {
            const textX = lang.x + (lang.width / 2);
            const percentY = 14;  // Reduced distance for percentage text
            const langY = 28;     // Reduced distance for language name text
            
            // Only add text if there's enough space (bar width > 40px)
            if (lang.width > 40) {
              // Add percentage on top line
              svg += `  <text x="${textX}" y="${percentY}" text-anchor="middle" dominant-baseline="middle" font-family="Arial" font-size="${fontSize}" font-weight="bold" fill="${lang.textColor}">${formatPercentage(lang.percentage)}</text>\n`;
              
              // Add language name on bottom line
              svg += `  <text x="${textX}" y="${langY}" text-anchor="middle" dominant-baseline="middle" font-family="Arial" font-size="${fontSize}" fill="${lang.textColor}">${lang.language}</text>\n`;
            }
          });
          
          svg += "</svg>";
          
          // Save SVG to file
          fs.writeFileSync(svgFilename, svg);
          
          // Create markdown for README
          let langSection = `![My Programming Languages](${svgFilename})\n\n`;
          
          // Add a note about the calculation method
          langSection += `*Top ${topCount} languages rescaled to 100%. Based on all repositories with 50/50 weighting between bytes and file count.*`;
          
          // Replace existing section or append to the end
          const startMarker = "<!-- START_LANGUAGE_STATS -->";
          const endMarker = "<!-- END_LANGUAGE_STATS -->";
          
          if (readme.includes(startMarker) && readme.includes(endMarker)) {
            // Replace existing section
            const regex = new RegExp(`${startMarker}[\\s\\S]*?${endMarker}`, "g");
            readme = readme.replace(regex, `${startMarker}\n${langSection}\n${endMarker}`);
          } else {
            // Append at the end
            readme += `\n\n${startMarker}\n${langSection}\n${endMarker}`;
          }
          
          fs.writeFileSync("README.md", readme);
          EOF
      
      - name: Generate Language Stats SVG and Update README
        run: |
          # Configuration
          export SHOW_OTHERS="false"  # Set to "true" to show "Other" category, "false" to rescale top 6 to 100%
          export TOP_LANGUAGES=6      # Show top 6 languages
          export SVG_FILENAME="language-stats.svg"  # Name of the SVG file to generate
          
          # Fetch the API and save results
          curl -s "https://sukitsubaki.vercel.app/language-stats" > stats.json
          
          # Run the Node.js script from file instead of inline
          node generate-stats.js
          
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add language-stats.svg README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "Update language stats in README"
          git push
