name: Update Language Stats

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create script file
        run: |
          cat > generate-stats.js << 'EOF'
          const fs = require("fs");
          const path = require("path");
          const stats = JSON.parse(fs.readFileSync("stats.json", "utf8"));
          let readme = fs.readFileSync("README.md", "utf8");
          
          // Configuration from environment variables
          const showOthers = process.env.SHOW_OTHERS === "true";
          const topCount = parseInt(process.env.TOP_LANGUAGES) || 6;
          const svgFilename = "language-stats.svg";
          const svgDir = path.dirname(process.env.SVG_FILENAME) || "api/language-stats";
          
          // Weights for calculation
          const sizeWeight = 0.5;
          const countWeight = 0.5;
          
          // Language colors
          const languageColors = {
            "PHP": { bg: "#777bb4", text: "#ffffff" },
            "JavaScript": { bg: "#f7df1e", text: "#1f2328" },
            "TypeScript": { bg: "#3178c6", text: "#ffffff" },
            "HTML": { bg: "#f06529", text: "#ffffff" },
            "CSS": { bg: "#663399", text: "#ffffff" },
            "Python": { bg: "#3670a0", text: "#ffffff" },
            "Java": { bg: "#f89820", text: "#1f2328" },
            "Ruby": { bg: "#cc342d", text: "#ffffff" },
            "Go": { bg: "#00add8", text: "#ffffff" },
            "Swift": { bg: "#f05138", text: "#ffffff" },
            "C": { bg: "#a8b9cc", text: "#ffffff" },
            "C++": { bg: "#00599c", text: "#ffffff" },
            "C#": { bg: "#178600", text: "#ffffff" },
            "Shell": { bg: "#4eaa25", text: "#ffffff" },
            "Rust": { bg: "#000000", text: "#ffffff" },
            "Other": { bg: "#ededed", text: "#1f2328" }
          };
          
          // Initialize language data structure
          const languages = {};
          
          // Parse stats data
          Object.entries(stats.languages).forEach(([lang, data]) => {
            // Initialize language entry
            if (!languages[lang]) {
              languages[lang] = {
                name: lang,
                color: languageColors[lang]?.bg || "#808080",
                textColor: languageColors[lang]?.text || "#1f2328",
                size: 0,
                count: 0,
                score: 0
              };
            }
            
            languages[lang].size = data.bytes;
            languages[lang].count = 1; // Minimum count for each language
          });
          
          // Calculate weighted scores
          Object.keys(languages).forEach(lang => {
            languages[lang].score = 
              Math.pow(languages[lang].size, sizeWeight) * 
              Math.pow(languages[lang].count, countWeight);
          });
          
          // Sort languages by score and limit to top count
          const sortedLanguages = Object.values(languages)
            .sort((a, b) => b.score - a.score)
            .slice(0, topCount);
          
          // Calculate total score for percentage calculation
          const totalScore = sortedLanguages.reduce((sum, lang) => sum + lang.score, 0);
          
          // Calculate percentages
          sortedLanguages.forEach(lang => {
            lang.percentage = (lang.score / totalScore) * 100;
          });
          
          // Formatting helper function
          const formatPercentage = (pct) => pct.toFixed(2) + "%";
          
          // SVG visualization parameters
          const svgWidth = 900;         // Width in pixels
          const barHeight = 20;         // Bar height
          const percentFontSize = 12;   // Font size for percentages
          const langFontSize = 10;      // Font size for language names
          const textSpacing = 6;        // Space between bar and language text
          const bottomPadding = 4;      // Bottom padding
          
          // Total SVG height calculation
          const svgHeight = barHeight + textSpacing + langFontSize + bottomPadding;
          
          // Text styling
          const fontFamily = "'Noto Sans', Helvetica, Arial, sans-serif";
          const langTextColor = "#1f2328";
          
          // Calculate bar widths and positions
          let totalWidth = 0;
          sortedLanguages.forEach(lang => {
            lang.percentage_width = lang.percentage / 100;
            lang.width = Math.floor(lang.percentage_width * svgWidth);
            lang.x = totalWidth;
            totalWidth += lang.width;
          });
          
          // Adjust for any rounding discrepancies
          if (totalWidth !== svgWidth) {
            const diff = svgWidth - totalWidth;
            const widestLang = [...sortedLanguages].sort((a, b) => b.width - a.width)[0];
            widestLang.width += diff;
          }
          
          // Create SVG markup
          let svg = `<svg width="${svgWidth}" height="${svgHeight}" viewBox="0 0 ${svgWidth} ${svgHeight}" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">\n`;
          
          // Add bar segments
          sortedLanguages.forEach(lang => {
            svg += `  <rect x="${lang.x}" y="0" width="${lang.width}" height="${barHeight}" fill="${lang.color}" />\n`;
          });
          
          // Add percentage text inside each bar segment
          sortedLanguages.forEach(lang => {
            const textX = lang.x + (lang.width / 2);
            const percentY = barHeight / 2; // Centered vertically
            
            // Only add text if there's enough space
            if (lang.width > 40) {
              svg += `  <text x="${textX}" y="${percentY}" text-anchor="middle" dominant-baseline="middle" font-family="${fontFamily}" font-size="${percentFontSize}" font-weight="bolder" fill="${lang.textColor}">${formatPercentage(lang.percentage)}</text>\n`;
            }
          });
          
          // Add language names below each bar segment
          sortedLanguages.forEach(lang => {
            const textX = lang.x + (lang.width / 2);
            const langY = barHeight + textSpacing + (langFontSize / 2);
            
            // Only add language name if there's enough space
            if (lang.width > 30) {
              svg += `  <text x="${textX}" y="${langY}" text-anchor="middle" dominant-baseline="middle" font-family="${fontFamily}" font-size="${langFontSize}" fill="${langTextColor}">${lang.name}</text>\n`;
            }
          });
          
          svg += "</svg>";
          
          // Cache-busting filename
          const timestamp = new Date().getTime();
          const uniqueSvgFilename = svgFilename.replace('.svg', `-${timestamp}.svg`);
          
          // Ensure directory exists
          if (!fs.existsSync(svgDir)) {
            fs.mkdirSync(svgDir, { recursive: true });
          }
          
          // Save SVG file
          fs.writeFileSync(path.join(svgDir, uniqueSvgFilename), svg);
          
          // Clean up old SVG files
          const files = fs.readdirSync(svgDir);
          files.forEach(file => {
            if (file.startsWith('language-stats-') && file.endsWith('.svg') && file !== uniqueSvgFilename) {
              try {
                fs.unlinkSync(path.join(svgDir, file));
                console.log(`Deleted old file: ${file}`);
              } catch (err) {
                console.error(`Error deleting file ${file}:`, err);
              }
            }
          });
          
          // Create markdown for README
          let langSection = `<img src="${svgDir}/${uniqueSvgFilename}" width="100%" alt="My Programming Languages">`;
          
          // Update README content
          const startMarker = "<!-- START_LANGUAGE_STATS -->";
          const endMarker = "<!-- END_LANGUAGE_STATS -->";
          
          if (readme.includes(startMarker) && readme.includes(endMarker)) {
            // Replace existing section
            const regex = new RegExp(`${startMarker}[\\s\\S]*?${endMarker}`, "g");
            readme = readme.replace(regex, `${startMarker}\n${langSection}\n${endMarker}`);
          } else {
            // Append at the end
            readme += `\n\n${startMarker}\n${langSection}\n${endMarker}`;
          }
          
          fs.writeFileSync("README.md", readme);
          EOF
      
      - name: Generate Language Stats SVG and Update README
        run: |
          # Configuration
          export SHOW_OTHERS="false"  # Set to "true" to show "Other" category, "false" to rescale top 6 to 100%
          export TOP_LANGUAGES=6      # Show top 6 languages
          export SVG_FILENAME="api/language-stats/language-stats.svg"  # Name of the SVG file to generate
          
          # Fetch the API and save results
          curl -s "https://sukitsubaki.vercel.app/language-stats" > stats.json
          
          # Run the Node.js script from file instead of inline
          node generate-stats.js
          
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add api/language-stats/language-stats-*.svg README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "Update language stats in README"
          git push
