name: Update Language Stats

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create script file
        run: |
          cat > generate-stats.js << 'EOF'
          const fs = require("fs");
          const path = require("path");
          const stats = JSON.parse(fs.readFileSync("stats.json", "utf8"));
          let readme = fs.readFileSync("README.md", "utf8");
          
          // Get configuration from environment variables
          const showOthers = process.env.SHOW_OTHERS === "true";
          const topCount = parseInt(process.env.TOP_LANGUAGES) || 6;
          const svgFilename = "language-stats.svg";
          const svgDir = path.dirname(process.env.SVG_FILENAME) || "api/language-stats";
          
          // Language colors (GitHub colors)
          const languageColors = {
            "PHP": { bg: "#8993be", text: "#ffffff" },
            "JavaScript": { bg: "#f1e05a", text: "#000000" },
            "TypeScript": { bg: "#3178c6", text: "#ffffff" },
            "HTML": { bg: "#e34c26", text: "#ffffff" },
            "CSS": { bg: "#563d7c", text: "#ffffff" },
            "Python": { bg: "#3572A5", text: "#ffffff" },
            "Java": { bg: "#b07219", text: "#ffffff" },
            "Ruby": { bg: "#701516", text: "#ffffff" },
            "Go": { bg: "#00ADD8", text: "#ffffff" },
            "Swift": { bg: "#ffac45", text: "#000000" },
            "C": { bg: "#555555", text: "#ffffff" },
            "C++": { bg: "#f34b7d", text: "#ffffff" },
            "C#": { bg: "#178600", text: "#ffffff" },
            "Shell": { bg: "#89e051", text: "#000000" },
            "Rust": { bg: "#dea584", text: "#000000" },
            "Other": { bg: "#ededed", text: "#000000" }
          };
          
          // Get the language entries and sort by percentage
          const langEntries = Object.entries(stats.languages)
            .map(([lang, data]) => ({
              language: lang,
              percentage: parseFloat(data.percentage.replace("%", ""))
            }))
            .sort((a, b) => b.percentage - a.percentage);
          
          // Get the top languages
          const topLanguages = langEntries.slice(0, topCount);
          
          // Calculate sum of top language percentages
          const topSum = topLanguages.reduce((sum, lang) => sum + lang.percentage, 0);
          
          // Function to format percentage
          const formatPercentage = (pct) => pct.toFixed(2) + "%";
          
          // Prepare final percentages for visualization
          let languages = [];
          
          if (showOthers) {
            // Use original percentages and add "Other"
            languages = topLanguages.map(lang => ({
              language: lang.language,
              percentage: lang.percentage,
              color: languageColors[lang.language]?.bg || "#808080",
              textColor: languageColors[lang.language]?.text || "#000000"
            }));
            
            if (langEntries.length > topCount && 100 - topSum > 0) {
              languages.push({
                language: "Other",
                percentage: 100 - topSum,
                color: languageColors["Other"].bg,
                textColor: languageColors["Other"].text
              });
            }
          } else {
            // Rescale percentages to total 100%
            languages = topLanguages.map(lang => ({
              language: lang.language,
              percentage: (lang.percentage / topSum) * 100,
              color: languageColors[lang.language]?.bg || "#808080",
              textColor: languageColors[lang.language]?.text || "#000000"
            }));
          }
          
          // Create SVG visualization
          const svgWidth = 900;         // Width in pixels
          const barHeight = 20;         // Bar height 20px as requested
          const percentFontSize = 14;   // Larger font for percentages (inside bar)
          const langFontSize = 10;      // Font size for language names (below bar)
          const textSpacing = 4;        // Space between bar and language text
          const svgHeight = barHeight + textSpacing + langFontSize + 2; // Total SVG height
          const fontFamily = "'Noto Sans', Helvetica, Arial, sans-serif";  // Font family with fallbacks
          const langTextColor = "#1f2328"; // Language text color
          
          // Calculate cumulative width for each language
          let totalWidth = 0;
          languages.forEach(lang => {
            lang.percentage_width = lang.percentage / 100;
            lang.width = Math.floor(lang.percentage_width * svgWidth);
            lang.x = totalWidth;
            totalWidth += lang.width;
          });
          
          // Adjust to ensure the total width equals svgWidth exactly
          if (totalWidth !== svgWidth) {
            const diff = svgWidth - totalWidth;
            // Add the difference to the widest bar to minimize visual impact
            const widestLang = [...languages].sort((a, b) => b.width - a.width)[0];
            widestLang.width += diff;
          }
          
          // Create SVG with explicit viewBox and preserveAspectRatio
          let svg = `<svg width="${svgWidth}" height="${svgHeight}" viewBox="0 0 ${svgWidth} ${svgHeight}" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">\n`;
          
          // Add bar segments - ensure x=0 for first bar to eliminate any left margin
          languages.forEach((lang, index) => {
            const x = index === 0 ? 0 : lang.x;
            svg += `  <rect x="${x}" y="0" width="${lang.width}" height="${barHeight}" fill="${lang.color}" />\n`;
          });
          
          // Add percentage text inside each bar segment
          languages.forEach(lang => {
            const textX = lang.x + (lang.width / 2);
            const percentY = barHeight / 2; // Centered vertically in the bar
            
            // Only add percentage text if there's enough space (bar width > 40px)
            if (lang.width > 40) {
              svg += `  <text x="${textX}" y="${percentY}" text-anchor="middle" dominant-baseline="middle" font-family="${fontFamily}" font-size="${percentFontSize}" font-weight="bold" fill="${lang.textColor}">${formatPercentage(lang.percentage)}</text>\n`;
            }
          });
          
          // Add language names below each bar segment
          languages.forEach(lang => {
            const textX = lang.x + (lang.width / 2);
            const langY = barHeight + textSpacing + langFontSize; // Position below the bar
            
            // Only add language name if there's enough space (bar width > 30px)
            if (lang.width > 30) {
              svg += `  <text x="${textX}" y="${langY}" text-anchor="middle" dominant-baseline="middle" font-family="${fontFamily}" font-size="${langFontSize}" fill="${langTextColor}">${lang.language}</text>\n`;
            }
          });
          
          svg += "</svg>";
          
          // Generate a unique filename to prevent caching issues
          const timestamp = new Date().getTime();
          const uniqueSvgFilename = svgFilename.replace('.svg', `-${timestamp}.svg`);
          
          // Make sure the directory exists
          if (!fs.existsSync(svgDir)) {
            fs.mkdirSync(svgDir, { recursive: true });
          }
          
          // Save SVG to file with timestamp in name
          fs.writeFileSync(path.join(svgDir, uniqueSvgFilename), svg);
          
          // Clean up old SVG files (keep only the latest)
          const files = fs.readdirSync(svgDir);
          files.forEach(file => {
            if (file.startsWith('language-stats-') && file.endsWith('.svg') && file !== uniqueSvgFilename) {
              try {
                fs.unlinkSync(path.join(svgDir, file));
                console.log(`Deleted old file: ${file}`);
              } catch (err) {
                console.error(`Error deleting file ${file}:`, err);
              }
            }
          });
          
          // Create markdown for README with HTML to ensure full width
          let langSection = `<img src="${svgDir}/${uniqueSvgFilename}" width="100%" alt="My Programming Languages">\n\n`;
          
          // Add a note about the calculation method
          langSection += `*Top ${topCount} languages rescaled to 100%. Based on all repositories with 50/50 weighting between bytes and file count.*`;
          
          // Replace existing section or append to the end
          const startMarker = "<!-- START_LANGUAGE_STATS -->";
          const endMarker = "<!-- END_LANGUAGE_STATS -->";
          
          if (readme.includes(startMarker) && readme.includes(endMarker)) {
            // Replace existing section
            const regex = new RegExp(`${startMarker}[\\s\\S]*?${endMarker}`, "g");
            readme = readme.replace(regex, `${startMarker}\n${langSection}\n${endMarker}`);
          } else {
            // Append at the end
            readme += `\n\n${startMarker}\n${langSection}\n${endMarker}`;
          }
          
          fs.writeFileSync("README.md", readme);
          EOF
      
      - name: Generate Language Stats SVG and Update README
        run: |
          # Configuration
          export SHOW_OTHERS="false"  # Set to "true" to show "Other" category, "false" to rescale top 6 to 100%
          export TOP_LANGUAGES=6      # Show top 6 languages
          export SVG_FILENAME="api/language-stats/language-stats.svg"  # Name of the SVG file to generate
          
          # Fetch the API and save results
          curl -s "https://sukitsubaki.vercel.app/language-stats" > stats.json
          
          # Run the Node.js script from file instead of inline
          node generate-stats.js
          
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add api/language-stats/language-stats-*.svg README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "Update language stats in README"
          git push
